a <-available.packages()
head(rownames(a), 3) ##Show the first few packages
head(rownames(a), 3)
head(rownames(c), 4)
head(rownames(b), 3)
head(rownames(a) 7)
head(rownames(a) 8)
head(rownames(a), 8)
head(rownames(a), 8)
head(rownames(a), 10)
install.packages("ctv")
library("ctv")
install.views
task.views
library(ctv)
search()
find.packages("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
b <- available.packages
head (rownames(b), 5)
b
a
help(rownames)
c <-available.packages()
head(rownames(c))
head(rownames(c), 10)
head(c)
help(head)
tail(c)
head(a)
head(rownames(b))
head(rownames(c))
head(rownames(a))
tail(rownames(c))
dim(a)
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.2/library")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("slidify")
find_rtools()
library(devtools)
find_rtools()
rtools()
search()
ls()
rm(list=ls())
q()
rorm(10)
rnorm(10)
?runif
setwd("C:/Users/Windows7/Desktop/CourseraDS/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data ,_ x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(2)
makevector()
makeVector
makeVector()
v <- (5:20)
makeVector(v)
v
makeVector(x = 5:20)
x
vec <- makeVector(v)
vec
cachemean(vec)
mean(vec)
mean(v)
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn <- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
getwd
getwed()
getwd()
x <- 1:10000
vec <- makeVector(x)
median(h = 1:10)
median(x = 1:10)
x
new_counter <- function() {
i <- 0
function() {
i <<- i +1
i
}
}
counter_one <- newcounter()
counter_one <- new_counter()
counter_two <- new_counter()
counter_one()
counter_one()
counter_one()
counter_two
counter_two()
c = rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
solve(c) %*% c
c = rbind(c(1, -.25, 7), c(7, -.25, 1), c(-.25, 7, 1))
c
solve(c)
solve(c) %*% c
x <- function () {
i <- 0
}
x
x(6)
i
y <- x(6)
y <- x()
y
y
y
x()
x()
x
x <- function() {}
x <- function() {
i <<- i + 1
}
y <- x()
i <- 0
y <- x()
y
y
y
y
y
y
y
y
i +1
y
i <- i + 1
i
i
i
y
i
ls(environment)
ls(environment(i))
ls(environment(y))
ls(environment(x))
ls(environment(new_counter))
get("i", environment())
get("i", environment(x))
ls()
rm(lis=ls())
rm(list=ls())
ls
ls()
new_counter <- function() {
i <- 0
function() {
i <<- i +1
i
}
}
counter_one <- new_counter()
counter_one()
counter_one()
counter_one()
counter_one()
i
ls
ls()
counter_one()
counter_one(2)
ls(environment(counter_one))
get("i", environment(counter_one))
ls()
ls(environent(new_counter))
ls(environment(new_counter))
get("counter_one", environment(new_counter))
get("new_counter", environment(new_counter))
get("new_counter")
search()
new_counter <- function() {
i <- 0
function() {
i <<- i +1
function() {
i <<<- i + 1
}
}
}
rm(list = ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
x <- matrix(c(1, -.25), c(-.25, 1))
x <- matrix(1:4, 2, 2)
x
solve(x)
solve(x) %*% x
makeCachMatrix(x)
madeCacheMatrix(x)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(makeCacheMatrix)
ls()
x
